Parameters:
  EnvironmentName:
    Type: String
  BastionHostKeyPairName:
    Type: String

Resources:
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our loadbalancer
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - LoadBalancer's Security Group
  WebAppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our web apps and SSH for the bastion hosts
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Web App Server's Security Group
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to the bastion host
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Bastion Host's Security Group
  #-----------------------
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LB
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      HealthCheckProtocol: HTTP
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5 
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref WebAppLoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0ee23bfc74a881de5
      SecurityGroups:
      - Ref: WebAppServerSecurityGroup
      InstanceType: t3.micro
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update -y
        sudo apt-get install unzip awscli -y
        sudo apt-get install apache2 -y
        sudo systemctl start apache2.service
        cd /var/www/html
        aws s3 cp s3://udaprojectbucket-1/udagram.zip .
        unzip -o udagram.zip      
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-SUBNETS"
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfiguration
      MinSize: '4'
      DesiredCapacity: '4'
      MaxSize: '8'
      TargetGroupARNs: 
      - Ref: WebAppTargetGroup
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref 'Listener'
      Priority: 1
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
  BastionHost1:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      AvailabilityZone: !Select [0, !GetAZs '']
      ImageId: ami-0ee23bfc74a881de5
      InstanceType: t2.micro
      KeyName: !Ref BastionHostKeyPairName
      SecurityGroupIds:
        - !GetAtt BastionHostSecurityGroup.GroupId
  BastionHost2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      AvailabilityZone: !Select [1, !GetAZs '']
      ImageId: ami-0ee23bfc74a881de5
      InstanceType: t2.micro
      KeyName: !Ref BastionHostKeyPairName
      SecurityGroupIds:
        - !GetAtt BastionHostSecurityGroup.GroupId
      
Outputs:
  LoadBalancerDns:
    Description: Web App LB DNS (URL)
    Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-URL"